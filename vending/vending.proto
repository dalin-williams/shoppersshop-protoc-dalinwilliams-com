syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

package shoppersshop_vendingmachine;

message InventorySearchAllItemCategoriesResponse {
    message Item {
        Category categories = 1;
        string store = 2;
    }
    repeated Item items = 1;
}

message InventorySearchForItemsRequest {
    // The category names - can pass many items
    repeated string category = 1;
    // The item names - can pass many items
    repeated string name = 2;
    // The category names - can pass many items
    int32 price = 3;
}

message InventorySearchForItemsResponse {
    repeated Inventory items = 1;
}

message PayViewCartResponse {
    repeated Inventory items = 1;
}

message PayPurchaseCartResponse {
    string call_uri = 1;
}

message PayAddToCartRequest {
    // A specific item id you wish to purchase
    double id = 1;
}

message PayUpdateOrderRequest {
    // Updated Vend Object
    Vend body = 1;
    // ID of order that needs to be updated
    string orderId = 2;
}

message PayUpdateOrderResponse {
    string call_back = 1;
}

message PayReOrderItemsRequest {
    // ID of order to re-order
    string orderId = 1;
}

message PayDeleteOrderRequest {
    // Order ID to delete
    string orderId = 1;
}

message SessionGetCurrentSessionResponse {
    // The session_id
    string session_id = 1;
}

message SessionLoginUserRequest {
    // The password for login in clear text
    string password = 1;
    // The user name for login
    string username = 2;
}

message SessionCreateSessionResponse {
    // The user ID
    string user_id = 1;
}

message SessionCreateUserRequest {
    // The created user object
    User body = 1;
}

message SessionCreateUserResponse {
    // The user ID
    string user_id = 1;
}

message SessionGetUserByUserIdRequest {
    // the user or session ID
    string userId = 1;
}

message SessionGetUserByUserIdResponse {
    User user = 1;
}

message SessionUpdateUserRequest {
    // Updated user object
    User body = 1;
    // the user or session ID
    string userId = 2;
}

message SessionDeleteUserRequest {
    // The name that needs to be deleted
    string userId = 1;
}

message VendGetSessionVendResponse {
    Vend vend = 1;
}

message VendGetVendByIdRequest {
    // The id we want to query for transactions
    string id = 1;
}

message VendGetVendByIdResponse {
    Vend vend = 1;
}

message ApiResponse {
    int32 code = 1;
    string message = 2;
    string type = 3;
}

message Category {
    string id = 1;
    string name = 2;
}

message Inventory {
    int32 cost = 1;
    string id = 2;
    string name = 3;
    repeated string photoUrls = 4;
    repeated Tag tags = 5;
    string url = 6;
}

message Tag {
    string id = 1;
    string name = 2;
}

message User {
    string email = 1;
    string firstName = 2;
    string id = 3;
    string lastName = 4;
    string password = 5;
    string phone = 6;
    // User Status
    int32 userStatus = 7;
    string username = 8;
}

message Vend {
    string id = 1;
    message Item {
        Category category = 1;
        Inventory item = 2;
        // The number of item x bought
    int32 quantity = 3;
    }
    repeated Item items = 2;
    // Order Status
    enum Vend_Statu {
        VEND_STATU_PLACED = 0;
        VEND_STATU_APPROVED = 1;
        VEND_STATU_DELIVERED = 2;
        VEND_STATU_CANCELLED = 3;
    }
    Vend_Statu status = 3;
    int32 total = 4;
}

service SHOPPERSSHOP_VendingMachineService {
    // Finds Pets by status
    // 
    // Get all stores once can vend the inventory by name
    rpc InventorySearchAllItemCategories(google.protobuf.Empty) returns (InventorySearchAllItemCategoriesResponse) {
      option (google.api.http) = {
        get: "/vending/v1/inventory"
      };
    }
    // Finds inventory items by query params
    // 
    // Search the inventory by query params
    rpc InventorySearchForItems(InventorySearchForItemsRequest) returns (InventorySearchForItemsResponse) {
      option (google.api.http) = {
        get: "/vending/v1/inventory/search"
      };
    }
    // See all items in your virtual cart
    // 
    // Shows all items in your cart
    rpc PayViewCart(google.protobuf.Empty) returns (PayViewCartResponse) {
      option (google.api.http) = {
        get: "/vending/v1/pay/purchase"
      };
    }
    // Initilize a vending transaction
    // 
    // Purchases all items in your cart
    rpc PayPurchaseCart(google.protobuf.Empty) returns (PayPurchaseCartResponse) {
      option (google.api.http) = {
        post: "/vending/v1/pay/purchase"
      };
    }
    // Add an item via id to your cart
    rpc PayAddToCart(PayAddToCartRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/vending/v1/pay/purchase/{id}"
      };
    }
    // Updates an old order
    // 
    // Updates an old order IF it is not completed
    rpc PayUpdateOrder(PayUpdateOrderRequest) returns (PayUpdateOrderResponse) {
      option (google.api.http) = {
        put: "/vending/v1/pay/{orderId}"
        body: "body"
      };
    }
    // Re-order items
    // 
    // Adds all items from the given order back to the cart
    rpc PayReOrderItems(PayReOrderItemsRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/vending/v1/pay/{orderId}"
      };
    }
    // Deletes a order IF it is not complete
    // 
    // Delete an outstanding order
    rpc PayDeleteOrder(PayDeleteOrderRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/vending/v1/pay/{orderId}"
      };
    }
    // Get the session
    // 
    // Returns the current session ID or creates one
    rpc SessionGetCurrentSession(google.protobuf.Empty) returns (SessionGetCurrentSessionResponse) {
      option (google.api.http) = {
        get: "/vending/v1/session"
      };
    }
    // Logs user into the system
    // 
    // Logs in the current user into the vending machine
    rpc SessionLoginUser(SessionLoginUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/vending/v1/session/login"
      };
    }
    // Logs out current logged in user session
    // 
    // Logs out the given user
    rpc SessionLogoutUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/vending/v1/session/logout"
      };
    }
    // Creates a user session
    // 
    // Creates a session with the given user
    rpc SessionCreateSession(google.protobuf.Empty) returns (SessionCreateSessionResponse) {
      option (google.api.http) = {
        put: "/vending/v1/session/user"
      };
    }
    // Creates a new user
    // 
    // Creates a user, returns the user id
    rpc SessionCreateUser(SessionCreateUserRequest) returns (SessionCreateUserResponse) {
      option (google.api.http) = {
        post: "/vending/v1/session/user"
        body: "body"
      };
    }
    // Get session or user by ID
    // 
    // Gets the session/user represented by the passed UUID
    rpc SessionGetUserByUserId(SessionGetUserByUserIdRequest) returns (SessionGetUserByUserIdResponse) {
      option (google.api.http) = {
        get: "/vending/v1/session/{userId}"
      };
    }
    // Updated user
    // 
    // This can only be done by the logged in user.
    rpc SessionUpdateUser(SessionUpdateUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/vending/v1/session/{userId}"
        body: "body"
      };
    }
    // Delete user
    // 
    // Deletes current user.
    rpc SessionDeleteUser(SessionDeleteUserRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/vending/v1/session/{userId}"
      };
    }
    // web-hook endpoint representing vended items by this session
    // 
    // The endpoint representing all of the items you've ever purchased - thanks!
    rpc VendGetSessionVend(google.protobuf.Empty) returns (VendGetSessionVendResponse) {
      option (google.api.http) = {
        get: "/vending/v1/vend"
      };
    }
    // Web-hook and transaction query
    // 
    // This endpoint gives access to transactions created by {TransactionId, UserId}
    rpc VendGetVendById(VendGetVendByIdRequest) returns (VendGetVendByIdResponse) {
      option (google.api.http) = {
        get: "/vending/v1/vend/{id}"
      };
    }
}
